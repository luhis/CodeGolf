// <auto-generated />
using System;
using CodeGolf.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CodeGolf.Persistence.Migrations
{
    [DbContext(typeof(CodeGolfContext))]
    partial class CodeGolfContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("CodeGolf.Domain.Attempt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<Guid>("HoleId");

                    b.Property<int>("Score");

                    b.Property<DateTime>("TimeStamp");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("HoleId");

                    b.HasIndex("UserId");

                    b.ToTable("Attempts");
                });

            modelBuilder.Entity("CodeGolf.Domain.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccessKey")
                        .IsRequired();

                    b.Property<DateTime>("Created");

                    b.Property<int>("Owner");

                    b.HasKey("Id");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("CodeGolf.Domain.Hole", b =>
                {
                    b.Property<Guid>("HoleId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ChallengeId");

                    b.Property<TimeSpan>("Duration");

                    b.Property<DateTime?>("End");

                    b.Property<Guid>("GameId");

                    b.Property<Guid?>("GameId1");

                    b.Property<int>("Rank");

                    b.Property<DateTime?>("Start");

                    b.HasKey("HoleId");

                    b.HasIndex("GameId");

                    b.HasIndex("GameId1");

                    b.ToTable("Holes");
                });

            modelBuilder.Entity("CodeGolf.Domain.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AvatarUri")
                        .IsRequired();

                    b.Property<string>("LoginName")
                        .IsRequired();

                    b.Property<string>("RealName")
                        .IsRequired();

                    b.HasKey("UserId");

                    b.HasIndex("LoginName")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CodeGolf.Domain.Attempt", b =>
                {
                    b.HasOne("CodeGolf.Domain.Hole")
                        .WithMany()
                        .HasForeignKey("HoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CodeGolf.Domain.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CodeGolf.Domain.Hole", b =>
                {
                    b.HasOne("CodeGolf.Domain.Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CodeGolf.Domain.Game")
                        .WithMany("Holes")
                        .HasForeignKey("GameId1");
                });
#pragma warning restore 612, 618
        }
    }
}
